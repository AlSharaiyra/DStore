-- Drop tables if they exist to avoid conflicts
DROP TABLE IF EXISTS user;
DROP TABLE IF EXISTS product;
DROP TABLE IF EXISTS payment;
DROP TABLE IF EXISTS order_table;
DROP TABLE IF EXISTS order_items;
DROP TABLE IF EXISTS category;
DROP TABLE IF EXISTS cart;
DROP TABLE IF EXISTS cart_items;
DROP TABLE IF EXISTS address;

-- Create the `user` table (without foreign key reference to cart yet)
CREATE TABLE user (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255),
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    age INTEGER,
    registered_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_modified TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    gender VARCHAR(255) NOT NULL
);

-- Create the `product` table
CREATE TABLE product (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DOUBLE NOT NULL,
    in_stock INTEGER NOT NULL,
    last_modified TIMESTAMP,
    category_id INTEGER NOT NULL
);

-- Create the `payment` table
CREATE TABLE payment (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    amount DOUBLE NOT NULL,
    payment_method VARCHAR(255) NOT NULL,
    is_payed BOOLEAN NOT NULL DEFAULT FALSE,
    order_id INTEGER
);

-- Create the `order_table` table
CREATE TABLE order_table (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ordered_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    payment_id INTEGER,
    user_id INTEGER
);

-- Create the `order_items` table
CREATE TABLE order_items (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    price DOUBLE NOT NULL,
    quantity INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    order_id INTEGER NOT NULL
);

-- Create the `category` table
CREATE TABLE category (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- Create the `cart` table
CREATE TABLE cart (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    number_of_items INTEGER
);

-- Create the `cart_items` table
CREATE TABLE cart_items (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    quantity INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    cart_id INTEGER NOT NULL
);

-- Create the `address` table
CREATE TABLE address (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    country VARCHAR(255) NOT NULL,
    city VARCHAR(255) NOT NULL,
    street VARCHAR(255) NOT NULL,
    building_number INTEGER NOT NULL,
    user_id INTEGER NOT NULL
);

-- Now that the basic tables are created, add foreign key constraints

-- Add foreign key constraints to the `user` table
ALTER TABLE user ADD COLUMN cart_id INTEGER;
ALTER TABLE user ADD CONSTRAINT FK_user_cart FOREIGN KEY (cart_id) REFERENCES cart(id) ON DELETE CASCADE;

-- Add foreign key constraints to the `product` table
ALTER TABLE product ADD CONSTRAINT FK_product_category FOREIGN KEY (category_id) REFERENCES category(id) ON DELETE CASCADE;

-- Add foreign key constraints to the `payment` table
ALTER TABLE payment ADD CONSTRAINT FK_payment_order FOREIGN KEY (order_id) REFERENCES order_table(id) ON DELETE SET NULL;

-- Add foreign key constraints to the `order_table` table
ALTER TABLE order_table ADD CONSTRAINT FK_order_payment FOREIGN KEY (payment_id) REFERENCES payment(id) ON DELETE SET NULL;
ALTER TABLE order_table ADD CONSTRAINT FK_order_user FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE SET NULL;

-- Add foreign key constraints to the `order_items` table
ALTER TABLE order_items ADD CONSTRAINT FK_order_items_product FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE;
ALTER TABLE order_items ADD CONSTRAINT FK_order_items_order FOREIGN KEY (order_id) REFERENCES order_table(id) ON DELETE CASCADE;

-- Add foreign key constraints to the `cart` table
ALTER TABLE cart ADD CONSTRAINT FK_cart_user FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE;

-- Add foreign key constraints to the `cart_items` table
ALTER TABLE cart_items ADD CONSTRAINT FK_cart_items_product FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE;
ALTER TABLE cart_items ADD CONSTRAINT FK_cart_items_cart FOREIGN KEY (cart_id) REFERENCES cart(id) ON DELETE CASCADE;

-- Add foreign key constraints to the `address` table
ALTER TABLE address ADD CONSTRAINT FK_address_user FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE;
